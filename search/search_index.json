{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OGC API Processes with ZOO-Project","text":""},{"location":"#background-on-zoo-project","title":"Background on ZOO-Project","text":"<p>The ZOO-Project is an open-source processing platform introduced in 2009, licensed under the MIT/X11 license. It facilitates integration and communication between existing software components using standards defined by the Open Geospatial Consortium (OGC).</p> <p>The platform aims to ensure that processing tasks follow the FAIR principles: Findable, Accessible, Interoperable, and Reproducible.</p> <p>The ZOO-Project supports the \"OGC API - Processes\" - Part 1 (Core) and Part 2 (Deploy, Replace, Undeploy) Standards.</p>"},{"location":"#background-on-ogc-api-processes","title":"Background on OGC API - Processes","text":""},{"location":"#introduction-to-ogc-api-processes","title":"Introduction to OGC API - Processes","text":"<p>The OGC API - Processes standard supports the wrapping of computational tasks into executable processes that can be offered by a server through a Web API and be invoked by a client application. It specifies a processing interface for communicating over a RESTful protocol using JavaScript Object Notation (JSON) encodings. The standard builds on concepts from the OGC Web Processing Service (WPS) 2.0 Interface Standard but provides a more modern approach, allowing for interaction with web resources using the OpenAPI specification. Importantly, it does not require implementation of a WPS interface.</p>"},{"location":"#use-cases-for-ogc-api-processes","title":"Use Cases for OGC API - Processes","text":"<p>Government agencies, private organizations, and academic institutions use the OGC API - Processes standard to provide access to geospatial algorithms for processing data, including data from sensors. This distributed approach to processing allows for more capacity to handle large datasets and perform complex computations. The standard facilitates integration into existing software packages and supports scalable workflows for processing geospatial data.</p>"},{"location":"#overview-of-ogc-api-processes-part-1-core","title":"Overview of \"OGC API - Processes - Part 1 - Core\"","text":"<p>The OGC API - Processes - Part 1: Core enables the execution of computational tasks such as raster algebra, geometry buffering, routing, constructive area geometry, and imagery analysis. It supports execution in two modes: synchronous, where the client waits for the execution to complete, and asynchronous, where the server processes the task in the background and the client periodically checks the status.</p> <p>The table below outlines the main resources defined by the OGC API - Processes - Part 1: Core standard:</p> Resource Path Purpose Landing page <code>/</code> Top-level resource serving as an entry point. Conformance declaration <code>/conformance</code> Information about the functionality supported by the server. API Definition <code>/api</code> Metadata about the API itself. Process list <code>/processes</code> Lists available processes with identifiers and links to descriptions. Process description <code>/processes/{processID}</code> Retrieves a process description. Process execution <code>/processes/{processID}/execution</code> (POST) Creates and executes a job. Job status info <code>/jobs/{jobID}</code> Retrieves information about the status of a job. Job results <code>/jobs/{jobID}/results</code> Retrieves the result(s) of a job. Job list <code>/jobs</code> Retrieves the list of jobs. Job Deletion <code>/jobs/{jobID}</code> (DELETE) Cancels and deletes a job."},{"location":"#overview-of-ogc-api-processes-part-2-deploy-replace-undeploy-dru","title":"Overview of \"OGC API - Processes - Part 2: Deploy, Replace, Undeploy (DRU)\"","text":"<p>The OGC API - Processes - Part 2 specification extends the Core standard by defining additional capabilities for managing processes. It allows users to deploy, replace, and undeploy computational processes dynamically. This specification is useful for scenarios where processes need to be updated or removed, providing more flexibility and control over the server's computational tasks.</p> <p>Here are the new resources introduced in Part 2:</p> Resource Path Purpose Deploy Process <code>/processes</code> (POST) Deploys a new process on the server. Replace Process <code>/processes/{processID}</code> (PUT) Replaces an existing process with a new version. Undeploy Process <code>/processes/{processID}</code> (DELETE) Removes an existing process from the server. Application Package (OGC AppPkg) <code>/processes/{processId}/package</code> Support accessing the OGC Application Package."},{"location":"#ogc-api-process-resources-combining-part-1-and-part-2","title":"OGC API - Process resources combining Part 1 and Part 2","text":"Resource Path Purpose Part Landing page <code>/</code> Top-level resource serving as an entry point. Part 1 Conformance declaration <code>/conformance</code> Information about the functionality supported by the server. Part 1 API Definition <code>/api</code> Metadata about the API itself. Part 1 Process list <code>/processes</code> Lists available processes with identifiers and links to descriptions. Part 1 Process description <code>/processes/{processID}</code> Retrieves detailed information about a specific process. Part 1 Process execution <code>/processes/{processID}/execution</code> (POST) Executes a process, creating a job. Part 1 Deploy Process <code>/processes</code> (POST) Deploys a new process on the server. Part 2 Replace Process <code>/processes/{processID}</code> (PUT) Replaces an existing process with a new version. Part 2 Undeploy Process <code>/processes/{processID}</code> (DELETE) Removes an existing process from the server. Part 2 Application Package (OGC AppPkg) <code>/processes/{processId}/package</code> Support accessing the OGC Application Package. Part 2 Job status info <code>/jobs/{jobID}</code> Retrieves the current status of a job. Part 1 Job results <code>/jobs/{jobID}/results</code> Retrieves the results of a job. Part 1 Job list <code>/jobs</code> Retrieves a list of submitted jobs. Part 1 Job deletion <code>/jobs/{jobID}</code> (DELETE) Cancels and deletes a job. Part 1"},{"location":"#relation-to-other-ogc-standards","title":"Relation to Other OGC Standards","text":"<p>The OGC API - Processes standard modernizes and extends the capabilities offered by the OGC WPS. While the WPS standard provided a standardized interface for accessing computational services, the OGC API - Processes standard adopts a resource-oriented approach leveraging the OpenAPI specification. This results in better integration with modern web technologies and programming practices, addressing all the use cases supported by WPS and enabling more flexible and robust processing capabilities.</p>"},{"location":"#learning-module-overview","title":"Learning Module overview","text":""},{"location":"#tutorials","title":"Tutorials","text":"<p>This series of tutorials provides a step-by-step guide to using the OGC API - Processes standard, covering the core functionalities from listing available processes to accessing the results of executed jobs. Each tutorial is designed to help you understand and implement the standard's capabilities in a practical way. The tutorials are provided with the following Jupyter Notebooks:</p> <ol> <li>Deploy an application package.ipynb</li> <li>List the deployed processes.ipynb</li> <li>Describe the process.ipynb</li> <li>Execute the process and monitor its job execution.ipynb</li> </ol>"},{"location":"#key-functionalities","title":"Key Functionalities","text":"<p>Following these tutorials, the user will be able to cover all these key functionalities: </p> <ul> <li>List Available Processes: Learn how to retrieve the list of processes offered by the server. This step provides an overview of the available computational tasks, including process identifiers, titles, and descriptions.</li> <li>Deployment: Discover how to deploy a new process, such as a custom application package using Common Workflow Language (CWL). This tutorial explains the encoding options for deployment requests and how to handle deployment responses.</li> <li>Process Description: Understand how to obtain detailed descriptions of individual processes, including their inputs, outputs, and supported execution modes. This step provides insight into how to configure and execute specific tasks.</li> <li>Execution: Learn how to execute a process using the <code>/processes/{processID}/execution</code> endpoint. The tutorial covers submitting the execution request, passing inputs, and handling different execution modes.</li> <li>Monitor Execution: Discover how to track the progress of a submitted job. This tutorial explains how to monitor job status, retrieve progress updates, and check for completion.</li> <li>Access Results: Learn how to retrieve the results of a completed job. The tutorial covers accessing outputs like STAC catalogs or other data formats, allowing you to analyze the processed data.</li> <li>Job Management: Understand how to manage jobs, including listing all jobs, cancelling running jobs, and deleting completed or failed jobs. This tutorial explains how to maintain the server's job history and resource usage.</li> </ul>"},{"location":"deploy-application/","title":"Deploy the Application Package","text":"<p>Deploying an Application Package using the OGC API Processes uses the API resource highlighted in bold in the table below:</p> Resource Path Purpose Part Landing page <code>/</code> Top-level resource serving as an entry point. Part 1 Conformance declaration <code>/conformance</code> Information about the functionality supported by the server. Part 1 API Definition <code>/api</code> Metadata about the API itself. Part 1 Process list <code>/processes</code> Lists available processes with identifiers and links to descriptions. Part 1 Process description <code>/processes/{processID}</code> Retrieves detailed information about a specific process. Part 1 Process execution <code>/processes/{processID}/execution</code> (POST) Executes a process, creating a job. Part 1 Deploy Process <code>/processes</code> (POST) Deploys a new process on the server. Part 2 Replace Process <code>/processes/{processID}</code> (PUT) Replaces an existing process with a new version. Part 2 Undeploy Process <code>/processes/{processID}</code> (DELETE) Removes an existing process from the server. Part 2 Application Package (OGC AppPkg) <code>/processes/{processId}/package</code> Support accessing the OGC Application Package. Part 2 Job status info <code>/jobs/{jobID}</code> Retrieves the current status of a job. Part 1 Job results <code>/jobs/{jobID}/results</code> Retrieves the results of a job. Part 1 Job list <code>/jobs</code> Retrieves a list of submitted jobs. Part 1 Job deletion <code>/jobs/{jobID}</code> (DELETE) Cancels and deletes a job. Part 1 <p>This resource permits the deployment of the an Application Package and provide two options for the <code>Content-Type</code>.</p>"},{"location":"deploy-application/#content-type-applicationogcapppkgjson","title":"Content-Type: application/ogcapppkg+json","text":"<p>Provide the reference to an Application Package.</p> curlPython <pre><code>curl -X 'POST' \\\n'http://localhost:8080/ogc-api/processes?w=water_bodies' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/ogcapppkg+json' \\\n-d '{\n\"executionUnit\": {\n    \"href\": \"https://github.com/eoap/mastering-app-package/releases/download/1.0.0/app-water-bodies-cloud-native.1.0.0.cwl\",\n    \"type\": \"application/cwl\"\n}\n}'\n</code></pre> <pre><code>import requests\n\nurl = \"http://localhost:8080/ogc-api/processes?w=water_bodies\"\nheaders = {\n    \"accept\": \"application/json\",\n    \"Content-Type\": \"application/ogcapppkg+json\"\n}\ndata = {\n    \"executionUnit\": {\n        \"href\": \"https://github.com/eoap/mastering-app-package/releases/download/1.0.0/app-water-bodies-cloud-native.1.0.0.cwl\",\n        \"type\": \"application/cwl\"\n    }\n}\n\nresponse = requests.post(url, headers=headers, json=data)\n\n# Check if the request was successful\nif response.status_code == 200:\n    print(\"Request successful!\")\n    print(response.json())  # Print response content as JSON\nelse:\n    print(f\"Request failed with status code {response.status_code}\")\n    print(response.text)\n</code></pre>"},{"location":"deploy-application/#content-type-applicationcwlyaml","title":"Content-Type: application/cwl+yaml","text":"curlPython <pre><code>curl -L https://github.com/eoap/mastering-app-package/releases/download/1.0.0/app-water-bodies-cloud-native.1.0.0.cwl &gt; app-water-bodies-cloud-native.1.0.0.cwl\n\ncurl -X 'POST' \\\n    'http://localhost:8080/ogc-api/processes?w=water_bodies' \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/cwl+yaml' \\\n    -d @app-water-bodies-cloud-native.1.0.0.cwl\n</code></pre> <pre><code>import requests\n\nurl = \"http://localhost:8080/ogc-api/processes?w=water_bodies\"\nheaders = {\n    \"accept\": \"application/json\",\n    \"Content-Type\": \"application/cwl+yaml\"\n}\n\n# Read the content of the file\nwith open(\"/path/to/your/file.yaml\", \"r\") as file:\n    file_data = file.read()\n\n# Send the POST request with the file content as the data\nresponse = requests.post(url, headers=headers, data=file_data)\n\n# Check if the request was successful\nif response.status_code == 200:\n    print(\"Request successful!\")\n    print(response.json())  # Print response content as JSON\nelse:\n    print(f\"Request failed with status code {response.status_code}\")\n    print(response.text)\n</code></pre>"},{"location":"deploy-application/#response","title":"Response","text":"<p>After executing the deployment request, the server sends back a process summary. The server response includes a Location header that contains the URL for accessing the detailed process description.</p> <p>Response content example:</p> <pre><code>{\n  \"id\": \"water-bodies\",\n  \"title\": \"Water bodies detection based on NDWI and otsu threshold\",\n  \"description\": \"Water bodies detection based on NDWI and otsu threshold\",\n  \"mutable\": true,\n  \"version\": \"1.4.1\",\n  \"metadata\": [\n    {\n      \"role\": \"https://schema.org/softwareVersion\",\n      \"value\": \"1.4.1\"\n    }\n  ],\n  \"outputTransmission\": [\n    \"value\",\n    \"reference\"\n  ],\n  \"jobControlOptions\": [\n    \"async-execute\",\n    \"dismiss\"\n  ],\n  \"links\": [\n    {\n      \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/execute\",\n      \"type\": \"application/json\",\n      \"title\": \"Execute End Point\",\n      \"href\": \"http://localhost:8080/ogc-api/processes/water-bodies/execution\"\n    }\n  ]\n}\n</code></pre> <p>Response headers example:</p> <pre><code>connection: Keep-Alive \n content-type: application/json;charset=UTF-8 \n date: Mon,21 Oct 2024 12:20:48 GMT \n keep-alive: timeout=5,max=100 \n location: http://localhost:8080/ogc-api/processes/water-bodies \n server: Apache/2.4.41 (Ubuntu) \n transfer-encoding: chunked \n x-also-also-also-powered-by: dru.securityOut \n x-also-also-powered-by: dru.securityIn \n x-also-powered-by: jwt.securityIn \n x-powered-by: ZOO-Project-DRU \n</code></pre>"},{"location":"deploy-application/#practice-lab","title":"Practice lab","text":"<p>Run the notebook 01 - Deploy an application package.</p>"},{"location":"describe-process/","title":"Describe the process","text":"<p>To describe a process, the OGC API Processes API uses the resource highlighted in bold in the table below:</p> Resource Path Purpose Part Landing page <code>/</code> Top-level resource serving as an entry point. Part 1 Conformance declaration <code>/conformance</code> Information about the functionality supported by the server. Part 1 API Definition <code>/api</code> Metadata about the API itself. Part 1 Process list <code>/processes</code> Lists available processes with identifiers and links to descriptions. Part 1 Process description <code>/processes/{processID}</code> Retrieves detailed information about a specific process. Part 1 Process execution <code>/processes/{processID}/execution</code> (POST) Executes a process, creating a job. Part 1 Deploy Process <code>/processes</code> (POST) Deploys a new process on the server. Part 2 Replace Process <code>/processes/{processID}</code> (PUT) Replaces an existing process with a new version. Part 2 Undeploy Process <code>/processes/{processID}</code> (DELETE) Removes an existing process from the server. Part 2 Application Package (OGC AppPkg) <code>/processes/{processId}/package</code> Support accessing the OGC Application Package. Part 2 Job status info <code>/jobs/{jobID}</code> Retrieves the current status of a job. Part 1 Job results <code>/jobs/{jobID}/results</code> Retrieves the results of a job. Part 1 Job list <code>/jobs</code> Retrieves a list of submitted jobs. Part 1 Job deletion <code>/jobs/{jobID}</code> (DELETE) Cancels and deletes a job. Part 1 <p>The process description contains information about inputs and outputs and a link to the execution endpoint for the process. </p> <p>The OGC API Processes - Core does not mandate the use of a specific process description to specify the interface of a process. That said, the OGC API Processes - Core requirements class makes the following recommendation:</p> <p>Implementations SHOULD consider supporting the OGC process description.</p> <p>For more information, see OGC 18-062r2 Section 7.10.</p> <p>The conformance class <code>ogc-process-description</code> is supported, meaning the server will provide a standard process description that contains the list and detailed description of every input and output. </p> <p>The input for a process can be either single-valued or multi-valued, meaning you can pass one or more values for a given input. </p> <p>Every input has <code>minOccurs</code> and <code>maxOccurs</code> attributes. If there are no <code>minOccurs</code> attributes, it means that the value is 1, and that the input is required to execute the process. </p> <p>Inputs may be optional, indicated by a <code>minOccurs</code> of 0. If there are no <code>maxOccurs</code>, the default value 1 applies, and the input can take only one value. </p> <p>If <code>maxOccurs</code> is greater than 1, the input can be an array of multiple items.</p>"},{"location":"describe-process/#response-example","title":"Response example","text":"<pre><code>{\n  \"id\": \"water-bodies\",\n  \"title\": \"Water bodies detection based on NDWI and otsu threshold\",\n  \"description\": \"Water bodies detection based on NDWI and otsu threshold applied to Sentinel-2 COG STAC items\",\n  \"mutable\": true,\n  \"version\": \"1.0.0\",\n  \"metadata\": [\n    {\n      \"role\": \"https://schema.org/softwareVersion\",\n      \"value\": \"1.0.0\"\n    },\n    {\n      \"role\": \"https://schema.org/author\",\n      \"value\": {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Person\",\n        \"s.name\": \"Jane Doe\",\n        \"s.email\": \"jane.doe@acme.earth\",\n        \"s.affiliation\": \"ACME\"\n      }\n    }\n  ],\n  \"outputTransmission\": [\n    \"value\",\n    \"reference\"\n  ],\n  \"jobControlOptions\": [\n    \"async-execute\",\n    \"dismiss\"\n  ],\n  \"links\": [\n    {\n      \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/execute\",\n      \"type\": \"application/json\",\n      \"title\": \"Execute End Point\",\n      \"href\": \"http://localhost:8080/acme/ogc-api/processes/water-bodies/execution\"\n    }\n  ],\n  \"inputs\": {\n    \"aoi\": {\n      \"title\": \"area of interest\",\n      \"description\": \"area of interest as a bounding box\",\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    },\n    \"bands\": {\n      \"title\": \"bands used for the NDWI\",\n      \"description\": \"bands used for the NDWI\",\n      \"maxOccurs\": 999,\n      \"extended-schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\",\n          \"default\": [\n            \"green\",\n            \"nir\"\n          ]\n        },\n        \"minItems\": 1,\n        \"maxItems\": 999\n      },\n      \"schema\": {\n        \"type\": \"string\",\n        \"default\": [\n          \"green\",\n          \"nir\"\n        ]\n      }\n    },\n    \"epsg\": {\n      \"title\": \"EPSG code\",\n      \"description\": \"EPSG code\",\n      \"schema\": {\n        \"type\": \"string\",\n        \"default\": \"EPSG:4326\",\n        \"nullable\": true\n      }\n    },\n    \"stac_items\": {\n      \"title\": \"Sentinel-2 STAC items\",\n      \"description\": \"list of Sentinel-2 COG STAC items\",\n      \"maxOccurs\": 999,\n      \"extended-schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"minItems\": 1,\n        \"maxItems\": 999\n      },\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"outputs\": {\n    \"stac_catalog\": {\n      \"title\": \"stac_catalog\",\n      \"description\": \"None\",\n      \"extended-schema\": {\n        \"oneOf\": [\n          {\n            \"allOf\": [\n              {\n                \"$ref\": \"http://zoo-project.org/dl/link.json\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"type\": {\n                    \"enum\": [\n                      \"application/json\"\n                    ]\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"value\"\n            ],\n            \"properties\": {\n              \"value\": {\n                \"oneOf\": [\n                  {\n                    \"type\": \"object\"\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      },\n      \"schema\": {\n        \"oneOf\": [\n          {\n            \"type\": \"object\"\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"describe-process/#practice-lab","title":"Practice lab","text":"<p>Run the notebook 03 - Describe the process.</p>"},{"location":"execute-monitor-process/","title":"Execute the process and monitor the execution","text":"<p>To submit an execution request of a deployed process and monitor it, the OGC API Processes API uses the resource highlighted in bold in the table below:</p> Resource Path Purpose Part Landing page <code>/</code> Top-level resource serving as an entry point. Part 1 Conformance declaration <code>/conformance</code> Information about the functionality supported by the server. Part 1 API Definition <code>/api</code> Metadata about the API itself. Part 1 Process list <code>/processes</code> Lists available processes with identifiers and links to descriptions. Part 1 Process description <code>/processes/{processID}</code> Retrieves detailed information about a specific process. Part 1 Process execution <code>/processes/{processID}/execution</code>(POST) Executes a process, creating a job. Part 1 Deploy Process <code>/processes</code> (POST) Deploys a new process on the server. Part 2 Replace Process <code>/processes/{processID}</code> (PUT) Replaces an existing process with a new version. Part 2 Undeploy Process <code>/processes/{processID}</code> (DELETE) Removes an existing process from the server. Part 2 Application Package (OGC AppPkg) <code>/processes/{processId}/package</code> Support accessing the OGC Application Package. Part 2 Job status info <code>/jobs/{jobID}</code> Retrieves the current status of a job. Part 1 Job results <code>/jobs/{jobID}/results</code> Retrieves the results of a job. Part 1 Job list <code>/jobs</code> Retrieves a list of submitted jobs. Part 1 Job deletion <code>/jobs/{jobID}</code> (DELETE) Cancels and deletes a job. Part 1"},{"location":"execute-monitor-process/#execution","title":"Execution","text":"<p>Using the endpoint <code>/processes/{processID}/execution</code>, the serve will execute the {processID} process. It leads to the creation of a <code>job</code>. </p> <p>The <code>job</code> is the entity that identifies the process execution.</p> <p>After the execution request is sent to the server, the server creates an unique identifier, <code>jobID</code>, for the job called. </p> <p>The server returns a status code of <code>201</code> along with a <code>Location</code> header that contains the URL to the job status. </p> <p>The information received in the response body matches the process summary that can be obtained by using the process list endpoint (<code>/processes/{processID}</code>).</p> curlPython <pre><code>curl -X 'POST' \\\n    'http://localhost:8080/acme/ogc-api/processes/water-bodies/execution' \\\n    -H 'accept: application/json' \\\n    -H 'Prefer: respond-async;return=representation' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n    \"inputs\": {\n        \"stac_items\": [\n        \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_10TFK_20210713_0_L2A\",\n        \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20220524_0_L2A\"\n        ],\n        \"aoi\": \"-121.399,39.834,-120.74,40.472\",\n        \"epsg\": \"EPSG:4326\",\n        \"bands\": [\n        \"green\",\n        \"nir\"\n        ]\n    }\n    }'\n</code></pre> <pre><code>data = {\n    \"inputs\": {\n        \"stac_items\": [\n            \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_10TFK_20210713_0_L2A\",\n            \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20220524_0_L2A\"\n        ],\n        \"aoi\": \"-121.399,39.834,-120.74,40.472\",\n        \"epsg\": \"EPSG:4326\",\n        \"bands\": [\n            \"green\",\n            \"nir\"\n        ]\n    }\n}\n\nheaders = {\n    \"accept\": \"*/*\",\n    \"Prefer\": \"respond-async;return=representation\",\n    \"Content-Type\": \"application/json\"\n}\n\nprocess_id = \"water-bodies\" \n\n# Submit the processing request\nresponse = requests.post(f\"{ogc_api_endpoint}/processes/{process_id}/execution\", headers=headers, json=data)\n</code></pre>"},{"location":"execute-monitor-process/#response-body-and-headers","title":"Response body and headers","text":"Response bodyResponse headers <p>Below an example of the response body</p> <pre><code>{\n\"jobID\": \"bfafdb8e-902c-11ef-a29c-8e55bd0a3308\",\n\"type\": \"process\",\n\"processID\": \"water-bodies\",\n\"created\": \"2024-10-22T04:18:54.378Z\",\n\"started\": \"2024-10-22T04:18:54.378Z\",\n\"updated\": \"2024-10-22T04:18:54.378Z\",\n\"status\": \"running\",\n\"message\": \"ZOO-Kernel accepted to run your service!\",\n\"links\": [\n    {\n    \"title\": \"Status location\",\n    \"rel\": \"monitor\",\n    \"type\": \"application/json\",\n    \"href\": \"http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308\"\n    }\n]\n}\n</code></pre> <p>Below an example of the response headers</p> <pre><code>connection: Keep-Alive \ncontent-type: application/json;charset=UTF-8 \ndate: Tue,22 Oct 2024 04:18:54 GMT \nkeep-alive: timeout=5,max=100 \nlocation: http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308 \npreference-applied: respond-async;return=representation \nserver: Apache/2.4.41 (Ubuntu) \ntransfer-encoding: chunked \nx-also-also-also-powered-by: dru.securityOut \nx-also-also-powered-by: dru.securityIn \nx-also-powered-by: jwt.securityIn \nx-powered-by: ZOO-Project-DRU \n</code></pre>"},{"location":"execute-monitor-process/#monitor-the-execution","title":"Monitor the execution","text":"<p>With the help of the unique job identifier <code>{jobID}</code>, the execution process can be monitored. </p> <p>The endpoint <code>/jobs/{jobID}</code> keeps track of the job <code>{jobID}</code> progress.</p> <p>This endpoint provides access to information about the job. As defined in the schema, the information should contain at least a <code>type</code> (<code>process</code>), a <code>jobId</code>, and a <code>status</code>.</p> <p>This <code>status</code> is one of the following values: <code>accepted</code>, <code>running</code>, <code>successful</code>, <code>failed</code>, <code>dismissed</code>.</p> <p>The job progress is monitored using the <code>progress</code> field, current step using <code>message</code>, and check service runtime using <code>created</code>, <code>started</code>, <code>updated</code>, and potentially <code>finished</code>.</p> <p>Optionally, the JSON object returned can contain links. </p> <p>Upon running the process, the server returns the current status as a single link. At the end of execution, another link should be available and include a URL to the results, identified by the relation 'http://www.opengis.net/def/rel/ogc/1.0/results'.</p> <p>In the ZOO-Project-DRU implementation, links to the log files of every step of the Application Package CWL workflow execution were added.</p> curlPython <pre><code>curl -X 'GET' \\\n    'http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308' \\\n    -H 'accept: application/json'\n</code></pre> <pre><code>job_url = \"http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308\"\n\nheaders = {\"accept\": \"application/json\"}\n\nstatus_response = requests.get(job_url, headers=headers)\n</code></pre>"},{"location":"execute-monitor-process/#response-body","title":"Response body","text":"<p>Below an example of the response body.</p> Status runningStatus successful <pre><code>{\n    \"progress\": 23,\n    \"jobID\": \"bfafdb8e-902c-11ef-a29c-8e55bd0a3308\",\n    \"type\": \"process\",\n    \"processID\": \"water-bodies\",\n    \"created\": \"2024-10-22T04:18:54.378Z\",\n    \"started\": \"2024-10-22T04:18:54.378Z\",\n    \"updated\": \"2024-10-22T04:19:41.546Z\",\n    \"status\": \"running\",\n    \"message\": \"execution submitted\",\n    \"links\": [\n        {\n        \"title\": \"Status location\",\n        \"rel\": \"monitor\",\n        \"type\": \"application/json\",\n        \"href\": \"http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308\"\n        }\n    ]\n}\n</code></pre> <pre><code>{\n    \"jobID\": \"bfafdb8e-902c-11ef-a29c-8e55bd0a3308\",\n    \"type\": \"process\",\n    \"processID\": \"water-bodies\",\n    \"created\": \"2024-10-22T04:18:54.378Z\",\n    \"started\": \"2024-10-22T04:18:54.378Z\",\n    \"finished\": \"2024-10-22T04:22:25.175Z\",\n    \"updated\": \"2024-10-22T04:22:25.018Z\",\n    \"status\": \"successful\",\n    \"message\": \"ZOO-Kernel successfully run your service!\",\n    \"links\": [\n        {\n        \"title\": \"Status location\",\n        \"rel\": \"monitor\",\n        \"type\": \"application/json\",\n        \"href\": \"http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308\"\n        },\n        {\n        \"title\": \"Result location\",\n        \"rel\": \"http://www.opengis.net/def/rel/ogc/1.0/results\",\n        \"type\": \"application/json\",\n        \"href\": \"http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/results\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_crop_2.log\",\n        \"title\": \"Tool log node_crop_2.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_crop.log\",\n        \"title\": \"Tool log node_crop.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_crop_3.log\",\n        \"title\": \"Tool log node_crop_3.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_normalized_difference.log\",\n        \"title\": \"Tool log node_normalized_difference.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_crop_4.log\",\n        \"title\": \"Tool log node_crop_4.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_otsu.log\",\n        \"title\": \"Tool log node_otsu.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_normalized_difference_2.log\",\n        \"title\": \"Tool log node_normalized_difference_2.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_otsu_2.log\",\n        \"title\": \"Tool log node_otsu_2.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_stac.log\",\n        \"title\": \"Tool log node_stac.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        },\n        {\n        \"href\": \"http://localhost:8080/acme/temp/water-bodies-bfafdb8e-902c-11ef-a29c-8e55bd0a3308/node_stage_out.log\",\n        \"title\": \"Tool log node_stage_out.log\",\n        \"rel\": \"related\",\n        \"type\": \"text/plain\"\n        }\n    ]\n    }\n</code></pre>"},{"location":"execute-monitor-process/#get-the-execution-results","title":"Get the execution results","text":"<p>Once the execution process is complete, the job <code>{jobID}</code> results are accessed using the endpoint <code>/jobs/{jobId}/results</code>. </p> curlPython <pre><code>curl -X 'GET' \\\n'http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/results' \\\n-H 'accept: application/json'\n</code></pre> <pre><code>results_url = \"http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/results\"\n\nheaders = {\"accept\": \"application/json\"}\n\nresponse = requests.get(results_url, headers=headers)\n</code></pre>"},{"location":"execute-monitor-process/#response-body_1","title":"Response body","text":"<pre><code>{\n  \"stac_catalog\": {\n    \"value\": {\n      \"type\": \"FeatureCollection\",\n      \"features\": [\n        {\n          \"type\": \"Feature\",\n          \"stac_version\": \"1.0.0\",\n          \"id\": \"S2B_10TFK_20210713_0_L2A\",\n          \"properties\": {\n            \"proj:epsg\": 32610,\n            \"proj:geometry\": {\n              \"type\": \"Polygon\",\n              \"coordinates\": [\n                [\n                  [\n                    636990,\n                    4410550\n                  ],\n                  [\n                    691590,\n                    4410550\n                  ],\n                  [\n                    691590,\n                    4482600\n                  ],\n                  [\n                    636990,\n                    4482600\n                  ],\n                  [\n                    636990,\n                    4410550\n                  ]\n                ]\n              ]\n            },\n            \"proj:bbox\": [\n              636990,\n              4410550,\n              691590,\n              4482600\n            ],\n            \"proj:shape\": [\n              7205,\n              5460\n            ],\n            \"proj:transform\": [\n              10,\n              0,\n              636990,\n              0,\n              -10,\n              4482600,\n              0,\n              0,\n              1\n            ],\n            \"proj:projjson\": {\n              \"$schema\": \"https://proj.org/schemas/v0.7/projjson.schema.json\",\n              \"type\": \"ProjectedCRS\",\n              \"name\": \"WGS 84 / UTM zone 10N\",\n              \"base_crs\": {\n                \"name\": \"WGS 84\",\n                \"datum\": {\n                  \"type\": \"GeodeticReferenceFrame\",\n                  \"name\": \"World Geodetic System 1984\",\n                  \"ellipsoid\": {\n                    \"name\": \"WGS 84\",\n                    \"semi_major_axis\": 6378137,\n                    \"inverse_flattening\": 298.257223563\n                  }\n                },\n                \"coordinate_system\": {\n                  \"subtype\": \"ellipsoidal\",\n                  \"axis\": [\n                    {\n                      \"name\": \"Geodetic latitude\",\n                      \"abbreviation\": \"Lat\",\n                      \"direction\": \"north\",\n                      \"unit\": \"degree\"\n                    },\n                    {\n                      \"name\": \"Geodetic longitude\",\n                      \"abbreviation\": \"Lon\",\n                      \"direction\": \"east\",\n                      \"unit\": \"degree\"\n                    }\n                  ]\n                },\n                \"id\": {\n                  \"authority\": \"EPSG\",\n                  \"code\": 4326\n                }\n              },\n              \"conversion\": {\n                \"name\": \"UTM zone 10N\",\n                \"method\": {\n                  \"name\": \"Transverse Mercator\",\n                  \"id\": {\n                    \"authority\": \"EPSG\",\n                    \"code\": 9807\n                  }\n                },\n                \"parameters\": [\n                  {\n                    \"name\": \"Latitude of natural origin\",\n                    \"value\": 0,\n                    \"unit\": \"degree\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8801\n                    }\n                  },\n                  {\n                    \"name\": \"Longitude of natural origin\",\n                    \"value\": -123,\n                    \"unit\": \"degree\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8802\n                    }\n                  },\n                  {\n                    \"name\": \"Scale factor at natural origin\",\n                    \"value\": 0.9996,\n                    \"unit\": \"unity\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8805\n                    }\n                  },\n                  {\n                    \"name\": \"False easting\",\n                    \"value\": 500000,\n                    \"unit\": \"metre\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8806\n                    }\n                  },\n                  {\n                    \"name\": \"False northing\",\n                    \"value\": 0,\n                    \"unit\": \"metre\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8807\n                    }\n                  }\n                ]\n              },\n              \"coordinate_system\": {\n                \"subtype\": \"Cartesian\",\n                \"axis\": [\n                  {\n                    \"name\": \"Easting\",\n                    \"abbreviation\": \"\",\n                    \"direction\": \"east\",\n                    \"unit\": \"metre\"\n                  },\n                  {\n                    \"name\": \"Northing\",\n                    \"abbreviation\": \"\",\n                    \"direction\": \"north\",\n                    \"unit\": \"metre\"\n                  }\n                ]\n              },\n              \"id\": {\n                \"authority\": \"EPSG\",\n                \"code\": 32610\n              }\n            },\n            \"proj:wkt2\": \"PROJCS[\\\"WGS 84 / UTM zone 10N\\\",GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-123],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"32610\\\"]]\",\n            \"datetime\": \"2021-07-13T19:03:24Z\"\n          },\n          \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n              [\n                [\n                  -121.39905410179915,\n                  39.833916743259095\n                ],\n                [\n                  -120.76135965075635,\n                  39.82336095080461\n                ],\n                [\n                  -120.73995321724426,\n                  40.471999341669175\n                ],\n                [\n                  -121.38373773482932,\n                  40.482798837728375\n                ],\n                [\n                  -121.39905410179915,\n                  39.833916743259095\n                ]\n              ]\n            ]\n          },\n          \"links\": [\n            {\n              \"rel\": \"collection\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/collection.json\",\n              \"type\": \"application/json\",\n              \"title\": \"Processing results\"\n            },\n            {\n              \"rel\": \"root\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/catalog.json\",\n              \"type\": \"application/json\"\n            },\n            {\n              \"rel\": \"self\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/S2B_10TFK_20210713_0_L2A/S2B_10TFK_20210713_0_L2A.json\",\n              \"type\": \"application/json\"\n            },\n            {\n              \"rel\": \"parent\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/collection.json\",\n              \"type\": \"application/json\",\n              \"title\": \"Processing results\"\n            }\n          ],\n          \"assets\": {\n            \"data\": {\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/S2B_10TFK_20210713_0_L2A/otsu.tif\",\n              \"type\": \"image/tiff; application=geotiff\",\n              \"storage:platform\": \"eoap\",\n              \"storage:requester_pays\": false,\n              \"storage:tier\": \"Standard\",\n              \"storage:region\": \"us-east-1\",\n              \"storage:endpoint\": \"http://eoap-zoo-project-localstack.eoap-zoo-project.svc.cluster.local:4566\",\n              \"roles\": [\n                \"data\",\n                \"visual\"\n              ]\n            }\n          },\n          \"bbox\": [\n            -121.39905410179915,\n            39.82336095080461,\n            -120.73995321724426,\n            40.482798837728375\n          ],\n          \"stac_extensions\": [\n            \"https://stac-extensions.github.io/projection/v1.1.0/schema.json\"\n          ],\n          \"collection\": \"bfafdb8e-902c-11ef-a29c-8e55bd0a3308\"\n        },\n        {\n          \"type\": \"Feature\",\n          \"stac_version\": \"1.0.0\",\n          \"id\": \"S2A_10TFK_20220524_0_L2A\",\n          \"properties\": {\n            \"proj:epsg\": 32610,\n            \"proj:geometry\": {\n              \"type\": \"Polygon\",\n              \"coordinates\": [\n                [\n                  [\n                    636990,\n                    4410550\n                  ],\n                  [\n                    691590,\n                    4410550\n                  ],\n                  [\n                    691590,\n                    4482600\n                  ],\n                  [\n                    636990,\n                    4482600\n                  ],\n                  [\n                    636990,\n                    4410550\n                  ]\n                ]\n              ]\n            },\n            \"proj:bbox\": [\n              636990,\n              4410550,\n              691590,\n              4482600\n            ],\n            \"proj:shape\": [\n              7205,\n              5460\n            ],\n            \"proj:transform\": [\n              10,\n              0,\n              636990,\n              0,\n              -10,\n              4482600,\n              0,\n              0,\n              1\n            ],\n            \"proj:projjson\": {\n              \"$schema\": \"https://proj.org/schemas/v0.7/projjson.schema.json\",\n              \"type\": \"ProjectedCRS\",\n              \"name\": \"WGS 84 / UTM zone 10N\",\n              \"base_crs\": {\n                \"name\": \"WGS 84\",\n                \"datum\": {\n                  \"type\": \"GeodeticReferenceFrame\",\n                  \"name\": \"World Geodetic System 1984\",\n                  \"ellipsoid\": {\n                    \"name\": \"WGS 84\",\n                    \"semi_major_axis\": 6378137,\n                    \"inverse_flattening\": 298.257223563\n                  }\n                },\n                \"coordinate_system\": {\n                  \"subtype\": \"ellipsoidal\",\n                  \"axis\": [\n                    {\n                      \"name\": \"Geodetic latitude\",\n                      \"abbreviation\": \"Lat\",\n                      \"direction\": \"north\",\n                      \"unit\": \"degree\"\n                    },\n                    {\n                      \"name\": \"Geodetic longitude\",\n                      \"abbreviation\": \"Lon\",\n                      \"direction\": \"east\",\n                      \"unit\": \"degree\"\n                    }\n                  ]\n                },\n                \"id\": {\n                  \"authority\": \"EPSG\",\n                  \"code\": 4326\n                }\n              },\n              \"conversion\": {\n                \"name\": \"UTM zone 10N\",\n                \"method\": {\n                  \"name\": \"Transverse Mercator\",\n                  \"id\": {\n                    \"authority\": \"EPSG\",\n                    \"code\": 9807\n                  }\n                },\n                \"parameters\": [\n                  {\n                    \"name\": \"Latitude of natural origin\",\n                    \"value\": 0,\n                    \"unit\": \"degree\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8801\n                    }\n                  },\n                  {\n                    \"name\": \"Longitude of natural origin\",\n                    \"value\": -123,\n                    \"unit\": \"degree\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8802\n                    }\n                  },\n                  {\n                    \"name\": \"Scale factor at natural origin\",\n                    \"value\": 0.9996,\n                    \"unit\": \"unity\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8805\n                    }\n                  },\n                  {\n                    \"name\": \"False easting\",\n                    \"value\": 500000,\n                    \"unit\": \"metre\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8806\n                    }\n                  },\n                  {\n                    \"name\": \"False northing\",\n                    \"value\": 0,\n                    \"unit\": \"metre\",\n                    \"id\": {\n                      \"authority\": \"EPSG\",\n                      \"code\": 8807\n                    }\n                  }\n                ]\n              },\n              \"coordinate_system\": {\n                \"subtype\": \"Cartesian\",\n                \"axis\": [\n                  {\n                    \"name\": \"Easting\",\n                    \"abbreviation\": \"\",\n                    \"direction\": \"east\",\n                    \"unit\": \"metre\"\n                  },\n                  {\n                    \"name\": \"Northing\",\n                    \"abbreviation\": \"\",\n                    \"direction\": \"north\",\n                    \"unit\": \"metre\"\n                  }\n                ]\n              },\n              \"id\": {\n                \"authority\": \"EPSG\",\n                \"code\": 32610\n              }\n            },\n            \"proj:wkt2\": \"PROJCS[\\\"WGS 84 / UTM zone 10N\\\",GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-123],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"32610\\\"]]\",\n            \"datetime\": \"2022-05-24T19:03:29Z\"\n          },\n          \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n              [\n                [\n                  -121.39905410179915,\n                  39.833916743259095\n                ],\n                [\n                  -120.76135965075635,\n                  39.82336095080461\n                ],\n                [\n                  -120.73995321724426,\n                  40.471999341669175\n                ],\n                [\n                  -121.38373773482932,\n                  40.482798837728375\n                ],\n                [\n                  -121.39905410179915,\n                  39.833916743259095\n                ]\n              ]\n            ]\n          },\n          \"links\": [\n            {\n              \"rel\": \"collection\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/collection.json\",\n              \"type\": \"application/json\",\n              \"title\": \"Processing results\"\n            },\n            {\n              \"rel\": \"root\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/catalog.json\",\n              \"type\": \"application/json\"\n            },\n            {\n              \"rel\": \"self\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/S2A_10TFK_20220524_0_L2A/S2A_10TFK_20220524_0_L2A.json\",\n              \"type\": \"application/json\"\n            },\n            {\n              \"rel\": \"parent\",\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/collection.json\",\n              \"type\": \"application/json\",\n              \"title\": \"Processing results\"\n            }\n          ],\n          \"assets\": {\n            \"data\": {\n              \"href\": \"s3://results/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/bfafdb8e-902c-11ef-a29c-8e55bd0a3308/S2A_10TFK_20220524_0_L2A/otsu.tif\",\n              \"type\": \"image/tiff; application=geotiff\",\n              \"storage:platform\": \"eoap\",\n              \"storage:requester_pays\": false,\n              \"storage:tier\": \"Standard\",\n              \"storage:region\": \"us-east-1\",\n              \"storage:endpoint\": \"http://eoap-zoo-project-localstack.eoap-zoo-project.svc.cluster.local:4566\",\n              \"roles\": [\n                \"data\",\n                \"visual\"\n              ]\n            }\n          },\n          \"bbox\": [\n            -121.39905410179915,\n            39.82336095080461,\n            -120.73995321724426,\n            40.482798837728375\n          ],\n          \"stac_extensions\": [\n            \"https://stac-extensions.github.io/projection/v1.1.0/schema.json\"\n          ],\n          \"collection\": \"bfafdb8e-902c-11ef-a29c-8e55bd0a3308\"\n        }\n      ],\n      \"id\": \"bfafdb8e-902c-11ef-a29c-8e55bd0a3308\"\n    }\n  }\n}\n</code></pre>"},{"location":"execute-monitor-process/#delete-a-job","title":"Delete a job","text":"<p>The endpoint <code>/jobs/{jobId}</code> can be used to terminate the job.</p> curlPython <pre><code>curl -X 'DELETE' \\\n    'http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308' \\\n    -H 'accept: application/json'\n</code></pre> <pre><code>import requests\n\nurl = 'http://localhost:8080/acme/ogc-api/jobs/bfafdb8e-902c-11ef-a29c-8e55bd0a3308'\nheaders = {'accept': 'application/json'}\n\nresponse = requests.delete(url, headers=headers)\n\n# Check the response status code\nif response.status_code == 204:\n    print(\"Job deleted successfully.\")\nelse:\n    print(f\"Failed to delete job. Status code: {response.status_code}, Response: {response.text}\")\n</code></pre>"},{"location":"execute-monitor-process/#response-body_2","title":"Response body","text":"<pre><code>{\n  \"jobID\": \"bfafdb8e-902c-11ef-a29c-8e55bd0a3308\",\n  \"status\": \"dismissed\",\n  \"message\": \"ZOO-Kernel successfully dismissed your service!\",\n  \"links\": [\n    {\n      \"title\": \"The job list for the current process\",\n      \"rel\": \"parent\",\n      \"type\": \"application/json\",\n      \"href\": \"http://localhost:8080/acme/ogc-api/jobs\"\n    }\n  ],\n  \"type\": \"process\",\n  \"processID\": \"water-bodies\",\n  \"created\": \"2024-10-22T04:18:54.378Z\",\n  \"started\": \"2024-10-22T04:18:54.378Z\",\n  \"finished\": \"2024-10-22T04:22:25.175Z\",\n  \"updated\": \"2024-10-22T04:22:25.018Z\"\n}\n</code></pre>"},{"location":"execute-monitor-process/#practice-lab","title":"Practice lab","text":"<p>Run the notebook 04 - Execute the process and monitor its job execution.ipynb.</p>"},{"location":"execution-scenario/","title":"Execution scenario","text":""},{"location":"execution-scenario/#user-personas","title":"User personas","text":"<p>The personas will help illustrate the workflow: Alice prepares and deploys the application, while Eric utilizes the deployed service to achieve his objectives.</p>"},{"location":"execution-scenario/#alice-eo-application-developer","title":"Alice \u2013 EO Application Developer","text":"<p>Alice is a developer specializing in Earth Observation (EO) applications. </p> <p>She creates geospatial processing solutions to analyze satellite data. For this tutorial, Alice has developed an application package for detecting water bodies using an algorithm based on the Normalized Difference Water Index (NDWI) and Otsu thresholding. </p> <p>She publishes this application package as a deployable process on an OGC API - Processes server.</p>"},{"location":"execution-scenario/#eric-data-scientist","title":"Eric \u2013 Data Scientist","text":"<p>Eric is a data scientist interested in using satellite imagery to monitor environmental changes, such as detecting water bodies. </p> <p>He discovers Alice\u2019s published application package and decides to use it by following the tutorial steps. </p> <p>Eric uses the OGC API - Processes interface to run Alice\u2019s application package on relevant datasets and retrieve results for analysis.</p>"},{"location":"execution-scenario/#user-scenarios","title":"User Scenarios","text":""},{"location":"execution-scenario/#alices-user-scenario","title":"Alice's User Scenario","text":"<p>Alice, an EO application developer, packages her water-bodies detection software as an EO Application Package. She follows these steps to create a deployable solution:</p> <ul> <li> <p>Prepare Container Images: She builds container images that include all execution dependencies for her software.</p> </li> <li> <p>Create CWL CommandLineTool Documents: Alice wraps her containerized command-line tools using CWL CommandLineTool documents.</p> </li> <li> <p>Orchestrate with a CWL Workflow: She organizes the CWL CommandLineTool documents into a workflow to execute the process.</p> </li> <li> <p>Test the Application Package: Alice verifies the application package through various execution scenarios.</p> </li> </ul> <p>This workflow allows Alice to share her EO Application Package for others like Eric to deploy on OGC API - Processes servers.</p> <p>Note: See https://eoap.github.io/mastering-app-package/ to learn about this scenario.</p>"},{"location":"execution-scenario/#erics-user-scenario","title":"Eric's User Scenario","text":"<p>Eric, a data scientist, wants to analyze satellite imagery to detect water bodies. He learns about Alice's published application package and follows these steps to achieve his goal:</p> <ul> <li> <p>Discover Alice\u2019s Application Package: Eric finds Alice's water-bodies detection application package in a repository or marketplace where it is shared.</p> </li> <li> <p>Deploy the Application: He deploys Alice\u2019s application package on an OGC API - Processes server, making the process available for execution.</p> </li> <li> <p>List Available Processes: Eric lists the processes on the server to confirm that the \"water-bodies\" process is now available.</p> </li> <li> <p>Check Process Details: He reviews the process's inputs and outputs to understand how to configure the execution.</p> </li> <li> <p>Execute the Process: Eric submits an execution request with the required parameters, such as area of interest and satellite data.</p> </li> <li> <p>Monitor Execution: He tracks the job's status to ensure it completes successfully.</p> </li> <li> <p>Access Results: Once the process finishes, Eric retrieves the outputs (e.g., a STAC catalog) for further analysis.</p> </li> </ul> <p>This workflow allows Eric to effectively utilize Alice\u2019s published application package for detecting water bodies.</p>"},{"location":"installation/","title":"Installing the ZOO-Project Helm chart on your platform","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>Before you begin, make sure you have the following tools installed and set up on your local environment:</p>"},{"location":"installation/#skaffold","title":"Skaffold","text":"<p>Skaffold is used to build, push, and deploy your application to Kubernetes. </p> <p>You can install it by following the instructions here.</p>"},{"location":"installation/#helm","title":"Helm","text":"<p>Helm is a package manager for Kubernetes, enabling you to manage Kubernetes applications easily. </p> <p>You can install it by following the steps here.</p>"},{"location":"installation/#dockerdesktop-required-for-apple-silicon","title":"Docker.Desktop (required for Apple silicon)","text":"<p>You can install it by following the steps here.</p> <p>From Docker.Desktop, enable Kubernetes in the Kubernetes settings pannel. Click on \"Apply &amp; restart\" button.</p>"},{"location":"installation/#minikube-not-required-for-apple-silicon","title":"Minikube (not required for Apple silicon)","text":"<p>Minikube runs a local Kubernetes cluster, ideal for development and testing. </p> <p>You can install it by following the guide here.</p> <p>Start your minikube instance with:</p> <pre><code>minikube start\n</code></pre>"},{"location":"installation/#optional-requirements","title":"Optional requirements","text":""},{"location":"installation/#kubectl","title":"Kubectl","text":"<p>Kubectl is a command-line tool for interacting with Kubernetes clusters. It allows you to manage and inspect cluster resources. While not strictly required, it's highly recommended for debugging and interacting with your Kubernetes environment.</p> <p>You can install it by following the instructions here.</p>"},{"location":"installation/#openlens","title":"OpenLens","text":"<p>OpenLens is a graphical user interface for managing and monitoring Kubernetes clusters. It provides a visual way to interact with resources. </p> <p>While it's optional, it can significantly improve your workflow. You can download it here.</p>"},{"location":"installation/#add-the-helm-repositories","title":"Add the helm repositories","text":"<pre><code>helm repo add localstack https://helm.localstack.cloud\nhelm repo add zoo-project https://zoo-project.github.io/charts/\n</code></pre>"},{"location":"installation/#checking-the-requirements","title":"Checking the requirements","text":"<p>After installing these tools, ensure they are available in your terminal by running the following commands:</p> <pre><code>skaffold version\nhelm version\n# The following command is not required to work on Apple silicon\nminikube version\n</code></pre> <p>If all commands return a version, you\u2019re good to go!</p>"},{"location":"installation/#deploying-the-workshop-environment","title":"Deploying the workshop environment","text":"<p>For the purpose of this workshop, we will use the following GitHub repository: dev-platform-eoap from the EOAP organization.</p> <p>Start the workshop environment.</p> <pre><code>git clone https://github.com/eoap/dev-platform-eoap.git\ncd dev-platform-eoap/ogc-api-processes-with-zoo/\nskaffold dev -p standard\n# Apple user must use the additional options below\ndocker pull zooproject/zoo-project:dru-2b3610cbb1198accadc14b6dead93ae29bd927fd --platform linux/amd64\nskaffold dev -p macos --platform linux/amd64 --enable-platform-node-affinity=true\n</code></pre> <p>After some time you will see something like the following indicating that everything is in place.</p> <pre><code>No tags generated\nStarting deploy...\nHelm release zoo-project-dru not installed. Installing...\nNAME: zoo-project-dru\nLAST DEPLOYED: Mon Mar 10 18:46:58 2025\nNAMESPACE: eoap-zoo-project\nSTATUS: deployed\nREVISION: 1\nNOTES:\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace eoap-zoo-project -l \"app.kubernetes.io/name=zoo-project-dru,app.kubernetes.io/instance=zoo-project-dru\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace eoap-zoo-project $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace eoap-zoo-project port-forward $POD_NAME 8080:$CONTAINER_PORT\nHelm release eoap-zoo-project-coder not installed. Installing...\nNAME: eoap-zoo-project-coder\nLAST DEPLOYED: Mon Mar 10 18:47:00 2025\nNAMESPACE: eoap-zoo-project\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nHelm release eoap-zoo-project-localstack not installed. Installing...\nNAME: eoap-zoo-project-localstack\nLAST DEPLOYED: Mon Mar 10 18:47:01 2025\nNAMESPACE: eoap-zoo-project\nSTATUS: deployed\nREVISION: 1\nNOTES:\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace \"eoap-zoo-project\" -l \"app.kubernetes.io/name=localstack,app.kubernetes.io/instance=eoap-zoo-project-localstack\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace \"eoap-zoo-project\" $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace \"eoap-zoo-project\" port-forward $POD_NAME 8080:$CONTAINER_PORT\nWaiting for deployments to stabilize...\n - eoap-zoo-project:deployment/zoo-project-dru-kubeproxy is ready. [6/7 deployment(s) still pending]\nI0310 18:47:06.018653 2854542 request.go:697] Waited for 1.124380065s due to client-side throttling, not priority and fairness, request: GET:https://127.0.0.1:36205/api/v1/namespaces/eoap-zoo-project/events?fieldSelector=involvedObject.name%3Dcode-server-deployment-d94b68f99-p5qdv%2CinvolvedObject.namespace%3Deoap-zoo-project%2CinvolvedObject.kind%3DPod%2CinvolvedObject.uid%3D28193f9d-458c-476d-af26-c4bf45b0f9e4\n - eoap-zoo-project:deployment/code-server-deployment: FailedToRetrieveImagePullSecret: Unable to retrieve some image pull secrets (kaniko-secret); attempting to pull the image may not succeed.\n    - eoap-zoo-project:pod/code-server-deployment-d94b68f99-p5qdv: FailedToRetrieveImagePullSecret: Unable to retrieve some image pull secrets (kaniko-secret); attempting to pull the image may not succeed.\n      &gt; [code-server-deployment-d94b68f99-p5qdv init-file-on-volume] Cloning into 'ogc-api-processes-with-zoo'...\n      &gt; [code-server-deployment-d94b68f99-p5qdv init-file-on-volume] [2025-03-10T17:47:04.843Z] info  Wrote default config file to /workspace/.config/code-server/config.yaml\n - eoap-zoo-project:deployment/eoap-zoo-project-localstack: waiting for rollout to finish: 0 of 1 updated replicas are available...\n - eoap-zoo-project:deployment/zoo-project-dru-zoofpm: waiting for init container init-wait-for-dependencies-zoofpm to complete\n    - eoap-zoo-project:pod/zoo-project-dru-zoofpm-5d77cbb77f-8t2lw: waiting for init container init-wait-for-dependencies-zoofpm to complete\n      &gt; [zoo-project-dru-zoofpm-5d77cbb77f-8t2lw init-wait-for-dependencies-zoofpm] nc: bad address 'zoo-project-dru-rabbitmq:5672'\n      &gt; [zoo-project-dru-zoofpm-5d77cbb77f-8t2lw init-wait-for-dependencies-zoofpm] zoo-project-dru-rabbitmq:5672 is unavailable - sleeping\n      &gt; [zoo-project-dru-zoofpm-5d77cbb77f-8t2lw init-wait-for-dependencies-zoofpm] nc: bad address 'zoo-project-dru-rabbitmq:5672'\n      &gt; [zoo-project-dru-zoofpm-5d77cbb77f-8t2lw init-wait-for-dependencies-zoofpm] zoo-project-dru-rabbitmq:5672 is unavailable - sleeping\n - eoap-zoo-project:deployment/zoo-project-dru-zookernel: waiting for init container init-wait-for-dependencies-zookernel to complete\n    - eoap-zoo-project:pod/zoo-project-dru-zookernel-8675b6d96f-xfjhp: waiting for init container init-wait-for-dependencies-zookernel to complete\n      &gt; [zoo-project-dru-zookernel-8675b6d96f-xfjhp init-wait-for-dependencies-zookernel] nc: bad address 'zoo-project-dru-rabbitmq:5672'\n      &gt; [zoo-project-dru-zookernel-8675b6d96f-xfjhp init-wait-for-dependencies-zookernel] zoo-project-dru-rabbitmq:5672 is unavailable - sleeping\n      &gt; [zoo-project-dru-zookernel-8675b6d96f-xfjhp init-wait-for-dependencies-zookernel] nc: bad address 'zoo-project-dru-rabbitmq:5672'\n      &gt; [zoo-project-dru-zookernel-8675b6d96f-xfjhp init-wait-for-dependencies-zookernel] zoo-project-dru-rabbitmq:5672 is unavailable - sleeping\n - eoap-zoo-project:statefulset/zoo-project-dru-postgresql: Waiting for 1 pods to be ready...\n - eoap-zoo-project:statefulset/zoo-project-dru-rabbitmq: Waiting for 1 pods to be ready...\n - eoap-zoo-project:statefulset/zoo-project-dru-postgresql is ready. [5/7 deployment(s) still pending]\n - eoap-zoo-project:deployment/eoap-zoo-project-localstack is ready. [4/7 deployment(s) still pending]\n - eoap-zoo-project:statefulset/zoo-project-dru-rabbitmq is ready. [3/7 deployment(s) still pending]\n - eoap-zoo-project:deployment/zoo-project-dru-zoofpm is ready. [2/7 deployment(s) still pending]\n - eoap-zoo-project:deployment/zoo-project-dru-zookernel is ready. [1/7 deployment(s) still pending]\n - eoap-zoo-project:deployment/code-server-deployment is ready.\nDeployments stabilized in 40.089 seconds\nPort forwarding service/zoo-project-dru-service in namespace eoap-zoo-project, remote port 80 -&gt; http://localhost:8080\nPort forwarding service/code-server-service in namespace eoap-zoo-project, remote port 8080 -&gt; http://localhost:8000\nNo artifacts found to watch\nPress Ctrl+C to exit\nWatching for changes...\n</code></pre>"},{"location":"installation/#accessing-the-ogc-api-processes-engine","title":"Accessing the OGC API Processes Engine","text":"<p>From there, you can access the EOEPCA Processing - OGC API Processes Engine using the following URL: http://localhost:8080.</p> <p>In addition, there is a Code Server available on http://localhost:8000 where you can find the notebooks.</p>"},{"location":"list-processes/","title":"List the available and deployed processes","text":"<p>To list the available and deployed processes, OGC API Processes API uses the resource highlighted in bold in the table below:</p> Resource Path Purpose Part Landing page <code>/</code> Top-level resource serving as an entry point. Part 1 Conformance declaration <code>/conformance</code> Information about the functionality supported by the server. Part 1 API Definition <code>/api</code> Metadata about the API itself. Part 1 Process list <code>/processes</code> Lists available processes with identifiers and links to descriptions. Part 1 Process description <code>/processes/{processID}</code> Retrieves detailed information about a specific process. Part 1 Process execution <code>/processes/{processID}/execution</code> Executes a process, creating a job. Part 1 Deploy Process <code>/processes</code> (POST) Deploys a new process on the server. Part 2 Replace Process <code>/processes/{processID}</code> (PUT) Replaces an existing process with a new version. Part 2 Undeploy Process <code>/processes/{processID}</code> (DELETE) Removes an existing process from the server. Part 2 Job status info <code>/jobs/{jobID}</code> Retrieves the current status of a job. Part 1 Job results <code>/jobs/{jobID}/results</code> Retrieves the results of a job. Part 1 Job list <code>/jobs</code> Retrieves a list of submitted jobs. Part 1 Job deletion <code>/jobs/{jobID}</code> Cancels and deletes a job. Part 1 <p>The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.</p> <p>For more information, see OGC 18-062r2 Section 7.9.</p> curlPython <pre><code>curl -X 'GET' \\\n    'http://localhost:8080/ogc-api/processes?limit=1000' \\\n    -H 'accept: application/json'\n</code></pre> <pre><code>import requests\n\nogc_api_endpoint = \"http://localhost:8080/ogc-api\"\n\nresponse = requests.get(f\"{ogc_api_endpoint}/processes\")    \n</code></pre>"},{"location":"list-processes/#practice-lab","title":"Practice lab","text":"<p>Run the notebook 02 - List the deployed processes.</p>"},{"location":"app/water-bodies-detection/","title":"Water bodies detection","text":"<p>This learning module re-uses an Application Package asset that is described in the Mastering Earth Observation Application Packaging with CWL module.</p> <p>In the context of the module, the Application Package is built and released by a Continuous Integration process running in GitHub and producing the releases found under https://github.com/eoap/mastering-app-package/releases/.</p> <p>The paragraphs below provide an overview of the application packaged as a OGC Earth Observation Application Package.  </p>"},{"location":"app/water-bodies-detection/#application-overview","title":"Application overview","text":"<p>This application takes as input Copernicus Sentinel-2 or USSG Landsat-9 data and detects water bodies by applying the Otsu thresholding technique on the Normalized Difference Water Index (NDWI).</p> <p>The NDWI is calculated with: </p> \\[ NDWI = { (green - nir) \\over (green + nir) }  \\] <p>Typically, NDWI values of water bodies are larger than 0.2 and built-up features have positive values between 0 and 0.2.</p> <p>Vegetation has much smaller NDWI values, which results in distinguishing vegetation from water bodies easier. </p> <p>The NDWI values correspond to the following ranges:</p> Range Description 0,2 - 1 Water surface 0.0 - 0,2 Flooding, humidity -0,3 - 0.0 Moderate drought, non-aqueous surfaces -1 - -0.3 Drought, non-aqueous surfaces <p>To ease the determination of the water surface/non water surface, the Ostu thresholding technique is used. </p> <p>In the simplest form, the Otsu algorithm returns a single intensity threshold that separate pixels into two classes, foreground and background. This threshold is determined by minimizing intra-class intensity variance, or equivalently, by maximizing inter-class variance:</p> <p></p>"},{"location":"app/water-bodies-detection/#application-details","title":"Application details","text":"<p>The application is a Python command line tool that takes a Sentinel-2 STAC item reference applies the crop over the area of interest for the radiometric bands green and NIR, the normalized difference, the Ostu threshold and finally creates a STAC catalog and items for the generated results.</p> <p>This scenario is depicted below:</p> graph TB subgraph Process STAC item   A[STAC Item] -- STAC Item URL --&gt; B   A[STAC Item] -- STAC Item URL --&gt; C   A[STAC Item] -- STAC Item URL --&gt; F subgraph loop on bands   B[\"crop(green)\"];   C[\"crop(nir)\"]; end   B[\"crop(green)\"] -- crop_green.tif --&gt; D[Normalized difference];   C[\"crop(nir)\"] -- crop_nir.tif --&gt; D[Normalized difference];   D -- norm_diff.tif --&gt; E[Otsu threshold] end   E -- otsu.tif --&gt; F[Create STAC Catalog]   F -- \"catalog.json/item.json/asset otsu.tif\" --&gt; G[(storage)]"},{"location":"app/water-bodies-detection/#application-package","title":"Application Package","text":"<p>The user packages the application as an Application Package to include a workflow that reads a Sentinel-2 STAC item references launches Python command line tool to detect the water bodies:</p> <p></p>"},{"location":"app/water-bodies-detection/#dataset","title":"Dataset","text":"<p>The development and test dataset is made of two Sentinel-2 acquisitions:</p> Acquisitions Mission Sentinel-2 Sentinel-2 Date 2022-05-24 2021-07-13 URL S2B_10TFK_20210713_0_L2A S2A_10TFK_20220524_0_L2A Quicklook <p>The execution scenario using the OGC API Processes processes several acquisitions, including the two above. </p>"},{"location":"reference/ogc-api-processes-openapi/","title":"OGI API Processes swagger","text":""},{"location":"reference/ogc-api-processes/","title":"OGC API Processes","text":"<p>OGC API Processes overview: </p> <ul> <li> <p>https://ogcapi.ogc.org/processes/overview.html</p> </li> <li> <p>https://ogcapi.ogc.org/processes/</p> </li> </ul> <p>Github repository: https://github.com/opengeospatial/ogcapi-processes</p>"},{"location":"reference/zoo-project/","title":"ZOO-Project","text":"<p>The ZOO-Project is an open-source platform designed for implementing and deploying geospatial processing services based on the OGC API - Processes standard. </p> <p>It allows for the execution of complex geospatial workflows via web services, supporting interoperability by ensuring that various systems and tools can interact with the exposed processes regardless of the underlying technology. </p> <p>The OGC API - Processes standard, which is the evolution of the Web Processing Service (WPS), brings a more modern, flexible, and RESTful approach to managing and executing geospatial processes over the web.</p> <p>The ZOO-Project aims at ensuring that processing tasks follow the FAIR principles: Findable, Accessible, Interoperable, and Reproducible.</p> <p>The ZOO-Project supports the \"OGC API - Processes\" and implements the Web Processing Service (WPS) standards WPS 1.0.0 and WPS 2.0.0 edited by the OGC. </p> <p>More information on the ZOO-Project can be found on the official website: https://www.zoo-project.org/.</p>"}]}